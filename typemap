# this typemap is only used by xsubpp
# to marshal THIS in xs code
QNetworkAccessManager *                 		T_PTROBJ_0000
QAbstractNetworkCache *                 		T_PTROBJ_0001
QVariantComparisonHelper *              		T_PTROBJ_0002
QUdpSocket *                            		T_PTROBJ_0003
QTcpSocket *                            		T_PTROBJ_0004
QHostAddress *                          		T_PTROBJ_0005
QNetworkDiskCache *                     		T_PTROBJ_0006
QFtp *                                  		T_PTROBJ_0007
QNetworkRequest *                       		T_PTROBJ_0008
QSysInfo *                              		T_PTROBJ_0009
QHttp *                                 		T_PTROBJ_0010
QSslCertificate *                       		T_PTROBJ_0011
QAuthenticator *                        		T_PTROBJ_0012
QNetworkCacheMetaData *                 		T_PTROBJ_0013
QNetworkProxyQuery *                    		T_PTROBJ_0014
QNetworkCookie *                        		T_PTROBJ_0015
QSslSocket *                            		T_PTROBJ_0016
QFlag *                                 		T_PTROBJ_0017
QIPv6Address *                          		T_PTROBJ_0018
Qt *                                    		T_PTROBJ_0019
QNetworkConfiguration *                 		T_PTROBJ_0020
QNetworkSession *                       		T_PTROBJ_0021
QAbstractSocket *                       		T_PTROBJ_0022
QUrlInfo *                              		T_PTROBJ_0023
QNetworkAddressEntry *                  		T_PTROBJ_0024
QIncompatibleFlag *                     		T_PTROBJ_0025
QNetworkReply *                         		T_PTROBJ_0026
QInternal *                             		T_PTROBJ_0027
QNetworkProxy *                         		T_PTROBJ_0028
QHttpHeader *                           		T_PTROBJ_0029
QHttpResponseHeader *                   		T_PTROBJ_0030
QNetworkProxyFactory *                  		T_PTROBJ_0031
QSslKey *                               		T_PTROBJ_0032
QIODevice *                             		T_PTROBJ_0033
QNetworkInterface *                     		T_PTROBJ_0034
QVariant::PrivateShared *               		T_PTROBJ_0035
QVariant *                              		T_PTROBJ_0036
QSslError *                             		T_PTROBJ_0037
QHostInfo *                             		T_PTROBJ_0038
QLocalServer *                          		T_PTROBJ_0039
QHttpRequestHeader *                    		T_PTROBJ_0040
QSslCipher *                            		T_PTROBJ_0041
QTcpServer *                            		T_PTROBJ_0042
QNetworkCookieJar *                     		T_PTROBJ_0043
QLocalSocket *                          		T_PTROBJ_0044
QVariant::Private *                     		T_PTROBJ_0045
QNetworkConfigurationManager *          		T_PTROBJ_0046
QSslConfiguration *                     		T_PTROBJ_0047
QBool *                                 		T_PTROBJ_0048
T000 *                                  		T_PTROBJ_0049
T001 *                                  		T_PTROBJ_0050
T002 *                                  		T_PTROBJ_0051
T003 *                                  		T_PTROBJ_0052
T004 *                                  		T_PTROBJ_0053
T005 *                                  		T_PTROBJ_0054
T006 *                                  		T_PTROBJ_0055
T007 *                                  		T_PTROBJ_0056
T008 *                                  		T_PTROBJ_0057
T009 *                                  		T_PTROBJ_0058
T010 *                                  		T_PTROBJ_0059
T011 *                                  		T_PTROBJ_0060
T012 *                                  		T_PTROBJ_0061
T013 *                                  		T_PTROBJ_0062
T014 *                                  		T_PTROBJ_0063
T015 *                                  		T_PTROBJ_0064
T016 *                                  		T_PTROBJ_0065
T017 *                                  		T_PTROBJ_0066
T018 *                                  		T_PTROBJ_0067

################################################################
INPUT
T_PTROBJ_0000
    if (sv_derived_from($arg, \"Qt::Network::QNetworkAccessManager\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkAccessManager\");

T_PTROBJ_0001
    if (sv_derived_from($arg, \"Qt::Network::QAbstractNetworkCache\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QAbstractNetworkCache\");

T_PTROBJ_0002
    if (sv_derived_from($arg, \"Qt::Core::QVariantComparisonHelper\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariantComparisonHelper\");

T_PTROBJ_0003
    if (sv_derived_from($arg, \"Qt::Network::QUdpSocket\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QUdpSocket\");

T_PTROBJ_0004
    if (sv_derived_from($arg, \"Qt::Network::QTcpSocket\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QTcpSocket\");

T_PTROBJ_0005
    if (sv_derived_from($arg, \"Qt::Network::QHostAddress\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHostAddress\");

T_PTROBJ_0006
    if (sv_derived_from($arg, \"Qt::Network::QNetworkDiskCache\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkDiskCache\");

T_PTROBJ_0007
    if (sv_derived_from($arg, \"Qt::Network::QFtp\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QFtp\");

T_PTROBJ_0008
    if (sv_derived_from($arg, \"Qt::Network::QNetworkRequest\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkRequest\");

T_PTROBJ_0009
    if (sv_derived_from($arg, \"Qt::Core::QSysInfo\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QSysInfo\");

T_PTROBJ_0010
    if (sv_derived_from($arg, \"Qt::Network::QHttp\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHttp\");

T_PTROBJ_0011
    if (sv_derived_from($arg, \"Qt::Network::QSslCertificate\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslCertificate\");

T_PTROBJ_0012
    if (sv_derived_from($arg, \"Qt::Network::QAuthenticator\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QAuthenticator\");

T_PTROBJ_0013
    if (sv_derived_from($arg, \"Qt::Network::QNetworkCacheMetaData\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkCacheMetaData\");

T_PTROBJ_0014
    if (sv_derived_from($arg, \"Qt::Network::QNetworkProxyQuery\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkProxyQuery\");

T_PTROBJ_0015
    if (sv_derived_from($arg, \"Qt::Network::QNetworkCookie\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkCookie\");

T_PTROBJ_0016
    if (sv_derived_from($arg, \"Qt::Network::QSslSocket\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslSocket\");

T_PTROBJ_0017
    if (sv_derived_from($arg, \"Qt::Core::QFlag\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QFlag\");

T_PTROBJ_0018
    if (sv_derived_from($arg, \"Qt::Network::QIPv6Address\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QIPv6Address\");

T_PTROBJ_0019
    if (sv_derived_from($arg, \"Qt\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt\");

T_PTROBJ_0020
    if (sv_derived_from($arg, \"Qt::Network::QNetworkConfiguration\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkConfiguration\");

T_PTROBJ_0021
    if (sv_derived_from($arg, \"Qt::Network::QNetworkSession\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkSession\");

T_PTROBJ_0022
    if (sv_derived_from($arg, \"Qt::Network::QAbstractSocket\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QAbstractSocket\");

T_PTROBJ_0023
    if (sv_derived_from($arg, \"Qt::Network::QUrlInfo\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QUrlInfo\");

T_PTROBJ_0024
    if (sv_derived_from($arg, \"Qt::Network::QNetworkAddressEntry\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkAddressEntry\");

T_PTROBJ_0025
    if (sv_derived_from($arg, \"Qt::Core::QIncompatibleFlag\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QIncompatibleFlag\");

T_PTROBJ_0026
    if (sv_derived_from($arg, \"Qt::Network::QNetworkReply\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkReply\");

T_PTROBJ_0027
    if (sv_derived_from($arg, \"Qt::Core::QInternal\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QInternal\");

T_PTROBJ_0028
    if (sv_derived_from($arg, \"Qt::Network::QNetworkProxy\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkProxy\");

T_PTROBJ_0029
    if (sv_derived_from($arg, \"Qt::Network::QHttpHeader\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHttpHeader\");

T_PTROBJ_0030
    if (sv_derived_from($arg, \"Qt::Network::QHttpResponseHeader\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHttpResponseHeader\");

T_PTROBJ_0031
    if (sv_derived_from($arg, \"Qt::Network::QNetworkProxyFactory\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkProxyFactory\");

T_PTROBJ_0032
    if (sv_derived_from($arg, \"Qt::Network::QSslKey\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslKey\");

T_PTROBJ_0033
    if (sv_derived_from($arg, \"Qt::Core::QIODevice\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QIODevice\");

T_PTROBJ_0034
    if (sv_derived_from($arg, \"Qt::Network::QNetworkInterface\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkInterface\");

T_PTROBJ_0035
    if (sv_derived_from($arg, \"Qt::Core::QVariant::PrivateShared\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant::PrivateShared\");

T_PTROBJ_0036
    if (sv_derived_from($arg, \"Qt::Core::QVariant\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant\");

T_PTROBJ_0037
    if (sv_derived_from($arg, \"Qt::Network::QSslError\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslError\");

T_PTROBJ_0038
    if (sv_derived_from($arg, \"Qt::Network::QHostInfo\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHostInfo\");

T_PTROBJ_0039
    if (sv_derived_from($arg, \"Qt::Network::QLocalServer\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QLocalServer\");

T_PTROBJ_0040
    if (sv_derived_from($arg, \"Qt::Network::QHttpRequestHeader\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QHttpRequestHeader\");

T_PTROBJ_0041
    if (sv_derived_from($arg, \"Qt::Network::QSslCipher\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslCipher\");

T_PTROBJ_0042
    if (sv_derived_from($arg, \"Qt::Network::QTcpServer\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QTcpServer\");

T_PTROBJ_0043
    if (sv_derived_from($arg, \"Qt::Network::QNetworkCookieJar\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkCookieJar\");

T_PTROBJ_0044
    if (sv_derived_from($arg, \"Qt::Network::QLocalSocket\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QLocalSocket\");

T_PTROBJ_0045
    if (sv_derived_from($arg, \"Qt::Core::QVariant::Private\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant::Private\");

T_PTROBJ_0046
    if (sv_derived_from($arg, \"Qt::Network::QNetworkConfigurationManager\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QNetworkConfigurationManager\");

T_PTROBJ_0047
    if (sv_derived_from($arg, \"Qt::Network::QSslConfiguration\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::QSslConfiguration\");

T_PTROBJ_0048
    if (sv_derived_from($arg, \"Qt::Core::QBool\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QBool\");

T_PTROBJ_0049
    if (sv_derived_from($arg, \"Qt::Network::Template::T000\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T000\");

T_PTROBJ_0050
    if (sv_derived_from($arg, \"Qt::Network::Template::T001\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T001\");

T_PTROBJ_0051
    if (sv_derived_from($arg, \"Qt::Network::Template::T002\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T002\");

T_PTROBJ_0052
    if (sv_derived_from($arg, \"Qt::Network::Template::T003\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T003\");

T_PTROBJ_0053
    if (sv_derived_from($arg, \"Qt::Network::Template::T004\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T004\");

T_PTROBJ_0054
    if (sv_derived_from($arg, \"Qt::Network::Template::T005\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T005\");

T_PTROBJ_0055
    if (sv_derived_from($arg, \"Qt::Network::Template::T006\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T006\");

T_PTROBJ_0056
    if (sv_derived_from($arg, \"Qt::Network::Template::T007\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T007\");

T_PTROBJ_0057
    if (sv_derived_from($arg, \"Qt::Network::Template::T008\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T008\");

T_PTROBJ_0058
    if (sv_derived_from($arg, \"Qt::Network::Template::T009\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T009\");

T_PTROBJ_0059
    if (sv_derived_from($arg, \"Qt::Network::Template::T010\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T010\");

T_PTROBJ_0060
    if (sv_derived_from($arg, \"Qt::Network::Template::T011\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T011\");

T_PTROBJ_0061
    if (sv_derived_from($arg, \"Qt::Network::Template::T012\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T012\");

T_PTROBJ_0062
    if (sv_derived_from($arg, \"Qt::Network::Template::T013\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T013\");

T_PTROBJ_0063
    if (sv_derived_from($arg, \"Qt::Network::Template::T014\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T014\");

T_PTROBJ_0064
    if (sv_derived_from($arg, \"Qt::Network::Template::T015\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T015\");

T_PTROBJ_0065
    if (sv_derived_from($arg, \"Qt::Network::Template::T016\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T016\");

T_PTROBJ_0066
    if (sv_derived_from($arg, \"Qt::Network::Template::T017\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T017\");

T_PTROBJ_0067
    if (sv_derived_from($arg, \"Qt::Network::Template::T018\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Network::Template::T018\");


################################################################
OUTPUT
T_PTROBJ_0000
    sv_setref_pv($arg, \"Qt::Network::QNetworkAccessManager\", (void *)$var);

T_PTROBJ_0001
    sv_setref_pv($arg, \"Qt::Network::QAbstractNetworkCache\", (void *)$var);

T_PTROBJ_0002
    sv_setref_pv($arg, \"Qt::Core::QVariantComparisonHelper\", (void *)$var);

T_PTROBJ_0003
    sv_setref_pv($arg, \"Qt::Network::QUdpSocket\", (void *)$var);

T_PTROBJ_0004
    sv_setref_pv($arg, \"Qt::Network::QTcpSocket\", (void *)$var);

T_PTROBJ_0005
    sv_setref_pv($arg, \"Qt::Network::QHostAddress\", (void *)$var);

T_PTROBJ_0006
    sv_setref_pv($arg, \"Qt::Network::QNetworkDiskCache\", (void *)$var);

T_PTROBJ_0007
    sv_setref_pv($arg, \"Qt::Network::QFtp\", (void *)$var);

T_PTROBJ_0008
    sv_setref_pv($arg, \"Qt::Network::QNetworkRequest\", (void *)$var);

T_PTROBJ_0009
    sv_setref_pv($arg, \"Qt::Core::QSysInfo\", (void *)$var);

T_PTROBJ_0010
    sv_setref_pv($arg, \"Qt::Network::QHttp\", (void *)$var);

T_PTROBJ_0011
    sv_setref_pv($arg, \"Qt::Network::QSslCertificate\", (void *)$var);

T_PTROBJ_0012
    sv_setref_pv($arg, \"Qt::Network::QAuthenticator\", (void *)$var);

T_PTROBJ_0013
    sv_setref_pv($arg, \"Qt::Network::QNetworkCacheMetaData\", (void *)$var);

T_PTROBJ_0014
    sv_setref_pv($arg, \"Qt::Network::QNetworkProxyQuery\", (void *)$var);

T_PTROBJ_0015
    sv_setref_pv($arg, \"Qt::Network::QNetworkCookie\", (void *)$var);

T_PTROBJ_0016
    sv_setref_pv($arg, \"Qt::Network::QSslSocket\", (void *)$var);

T_PTROBJ_0017
    sv_setref_pv($arg, \"Qt::Core::QFlag\", (void *)$var);

T_PTROBJ_0018
    sv_setref_pv($arg, \"Qt::Network::QIPv6Address\", (void *)$var);

T_PTROBJ_0019
    sv_setref_pv($arg, \"Qt\", (void *)$var);

T_PTROBJ_0020
    sv_setref_pv($arg, \"Qt::Network::QNetworkConfiguration\", (void *)$var);

T_PTROBJ_0021
    sv_setref_pv($arg, \"Qt::Network::QNetworkSession\", (void *)$var);

T_PTROBJ_0022
    sv_setref_pv($arg, \"Qt::Network::QAbstractSocket\", (void *)$var);

T_PTROBJ_0023
    sv_setref_pv($arg, \"Qt::Network::QUrlInfo\", (void *)$var);

T_PTROBJ_0024
    sv_setref_pv($arg, \"Qt::Network::QNetworkAddressEntry\", (void *)$var);

T_PTROBJ_0025
    sv_setref_pv($arg, \"Qt::Core::QIncompatibleFlag\", (void *)$var);

T_PTROBJ_0026
    sv_setref_pv($arg, \"Qt::Network::QNetworkReply\", (void *)$var);

T_PTROBJ_0027
    sv_setref_pv($arg, \"Qt::Core::QInternal\", (void *)$var);

T_PTROBJ_0028
    sv_setref_pv($arg, \"Qt::Network::QNetworkProxy\", (void *)$var);

T_PTROBJ_0029
    sv_setref_pv($arg, \"Qt::Network::QHttpHeader\", (void *)$var);

T_PTROBJ_0030
    sv_setref_pv($arg, \"Qt::Network::QHttpResponseHeader\", (void *)$var);

T_PTROBJ_0031
    sv_setref_pv($arg, \"Qt::Network::QNetworkProxyFactory\", (void *)$var);

T_PTROBJ_0032
    sv_setref_pv($arg, \"Qt::Network::QSslKey\", (void *)$var);

T_PTROBJ_0033
    sv_setref_pv($arg, \"Qt::Core::QIODevice\", (void *)$var);

T_PTROBJ_0034
    sv_setref_pv($arg, \"Qt::Network::QNetworkInterface\", (void *)$var);

T_PTROBJ_0035
    sv_setref_pv($arg, \"Qt::Core::QVariant::PrivateShared\", (void *)$var);

T_PTROBJ_0036
    sv_setref_pv($arg, \"Qt::Core::QVariant\", (void *)$var);

T_PTROBJ_0037
    sv_setref_pv($arg, \"Qt::Network::QSslError\", (void *)$var);

T_PTROBJ_0038
    sv_setref_pv($arg, \"Qt::Network::QHostInfo\", (void *)$var);

T_PTROBJ_0039
    sv_setref_pv($arg, \"Qt::Network::QLocalServer\", (void *)$var);

T_PTROBJ_0040
    sv_setref_pv($arg, \"Qt::Network::QHttpRequestHeader\", (void *)$var);

T_PTROBJ_0041
    sv_setref_pv($arg, \"Qt::Network::QSslCipher\", (void *)$var);

T_PTROBJ_0042
    sv_setref_pv($arg, \"Qt::Network::QTcpServer\", (void *)$var);

T_PTROBJ_0043
    sv_setref_pv($arg, \"Qt::Network::QNetworkCookieJar\", (void *)$var);

T_PTROBJ_0044
    sv_setref_pv($arg, \"Qt::Network::QLocalSocket\", (void *)$var);

T_PTROBJ_0045
    sv_setref_pv($arg, \"Qt::Core::QVariant::Private\", (void *)$var);

T_PTROBJ_0046
    sv_setref_pv($arg, \"Qt::Network::QNetworkConfigurationManager\", (void *)$var);

T_PTROBJ_0047
    sv_setref_pv($arg, \"Qt::Network::QSslConfiguration\", (void *)$var);

T_PTROBJ_0048
    sv_setref_pv($arg, \"Qt::Core::QBool\", (void *)$var);

T_PTROBJ_0049
    sv_setref_pv($arg, \"Qt::Network::Template::T000\", (void *)$var);

T_PTROBJ_0050
    sv_setref_pv($arg, \"Qt::Network::Template::T001\", (void *)$var);

T_PTROBJ_0051
    sv_setref_pv($arg, \"Qt::Network::Template::T002\", (void *)$var);

T_PTROBJ_0052
    sv_setref_pv($arg, \"Qt::Network::Template::T003\", (void *)$var);

T_PTROBJ_0053
    sv_setref_pv($arg, \"Qt::Network::Template::T004\", (void *)$var);

T_PTROBJ_0054
    sv_setref_pv($arg, \"Qt::Network::Template::T005\", (void *)$var);

T_PTROBJ_0055
    sv_setref_pv($arg, \"Qt::Network::Template::T006\", (void *)$var);

T_PTROBJ_0056
    sv_setref_pv($arg, \"Qt::Network::Template::T007\", (void *)$var);

T_PTROBJ_0057
    sv_setref_pv($arg, \"Qt::Network::Template::T008\", (void *)$var);

T_PTROBJ_0058
    sv_setref_pv($arg, \"Qt::Network::Template::T009\", (void *)$var);

T_PTROBJ_0059
    sv_setref_pv($arg, \"Qt::Network::Template::T010\", (void *)$var);

T_PTROBJ_0060
    sv_setref_pv($arg, \"Qt::Network::Template::T011\", (void *)$var);

T_PTROBJ_0061
    sv_setref_pv($arg, \"Qt::Network::Template::T012\", (void *)$var);

T_PTROBJ_0062
    sv_setref_pv($arg, \"Qt::Network::Template::T013\", (void *)$var);

T_PTROBJ_0063
    sv_setref_pv($arg, \"Qt::Network::Template::T014\", (void *)$var);

T_PTROBJ_0064
    sv_setref_pv($arg, \"Qt::Network::Template::T015\", (void *)$var);

T_PTROBJ_0065
    sv_setref_pv($arg, \"Qt::Network::Template::T016\", (void *)$var);

T_PTROBJ_0066
    sv_setref_pv($arg, \"Qt::Network::Template::T017\", (void *)$var);

T_PTROBJ_0067
    sv_setref_pv($arg, \"Qt::Network::Template::T018\", (void *)$var);

